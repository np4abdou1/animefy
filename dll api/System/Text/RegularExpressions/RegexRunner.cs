using System;

namespace System.Text.RegularExpressions
{
	/// <summary>The <see cref="T:System.Text.RegularExpressions.RegexRunner" /> class is the base class for compiled regular expressions.</summary>
	// Token: 0x020000B7 RID: 183
	public abstract class RegexRunner
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexRunner" /> class. </summary>
		// Token: 0x06000583 RID: 1411 RVA: 0x0000222D File Offset: 0x0000042D
		protected internal RegexRunner()
		{
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="regex">An instance of the regular expression engine. </param>
		/// <param name="text">The text to scan for a pattern match. </param>
		/// <param name="textbeg">The zero-based starting position in <paramref name="text" /> at which the regular expression engine scans for a match.  </param>
		/// <param name="textend">The zero-based ending position in <paramref name="text" /> at which the regular expression engine scans for a match.  </param>
		/// <param name="textstart">The zero-based starting position to scan for this match.  </param>
		/// <param name="prevlen">The number of characters in the previous match. </param>
		/// <param name="quick">
		///   <see langword="true" /> to search for a match in quick mode; otherwise, <see langword="false" />. </param>
		/// <param name="timeout">The timeout interval. </param>
		/// <returns>A match. </returns>
		// Token: 0x06000584 RID: 1412 RVA: 0x00022CE4 File Offset: 0x00020EE4
		protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout)
		{
			bool flag = false;
			Regex.ValidateMatchTimeout(timeout);
			this._ignoreTimeout = (Regex.InfiniteMatchTimeout == timeout);
			this._timeout = (this._ignoreTimeout ? ((int)Regex.InfiniteMatchTimeout.TotalMilliseconds) : ((int)(timeout.TotalMilliseconds + 0.5)));
			this.runregex = regex;
			this.runtext = text;
			this.runtextbeg = textbeg;
			this.runtextend = textend;
			this.runtextstart = textstart;
			int num = this.runregex.RightToLeft ? -1 : 1;
			int num2 = this.runregex.RightToLeft ? this.runtextbeg : this.runtextend;
			this.runtextpos = textstart;
			if (prevlen == 0)
			{
				if (this.runtextpos == num2)
				{
					return Match.Empty;
				}
				this.runtextpos += num;
			}
			this.StartTimeoutWatch();
			for (;;)
			{
				if (this.FindFirstChar())
				{
					this.CheckTimeout();
					if (!flag)
					{
						this.InitMatch();
						flag = true;
					}
					this.Go();
					if (this.runmatch._matchcount[0] > 0)
					{
						break;
					}
					this.runtrackpos = this.runtrack.Length;
					this.runstackpos = this.runstack.Length;
					this.runcrawlpos = this.runcrawl.Length;
				}
				if (this.runtextpos == num2)
				{
					goto Block_9;
				}
				this.runtextpos += num;
			}
			return this.TidyMatch(quick);
			Block_9:
			this.TidyMatch(true);
			return Match.Empty;
		}

		// Token: 0x06000585 RID: 1413 RVA: 0x00022E46 File Offset: 0x00021046
		private void StartTimeoutWatch()
		{
			if (this._ignoreTimeout)
			{
				return;
			}
			this._timeoutChecksToSkip = 1000;
			this._timeoutOccursAt = Environment.TickCount + this._timeout;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06000586 RID: 1414 RVA: 0x00022E6E File Offset: 0x0002106E
		protected void CheckTimeout()
		{
			if (this._ignoreTimeout)
			{
				return;
			}
			this.DoCheckTimeout();
		}

		// Token: 0x06000587 RID: 1415 RVA: 0x00022E80 File Offset: 0x00021080
		private void DoCheckTimeout()
		{
			int num = this._timeoutChecksToSkip - 1;
			this._timeoutChecksToSkip = num;
			if (num != 0)
			{
				return;
			}
			this._timeoutChecksToSkip = 1000;
			int tickCount = Environment.TickCount;
			if (tickCount < this._timeoutOccursAt)
			{
				return;
			}
			if (0 > this._timeoutOccursAt && 0 < tickCount)
			{
				return;
			}
			throw new RegexMatchTimeoutException(this.runtext, this.runregex.pattern, TimeSpan.FromMilliseconds((double)this._timeout));
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x06000588 RID: 1416
		protected abstract void Go();

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06000589 RID: 1417
		protected abstract bool FindFirstChar();

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x0600058A RID: 1418
		protected abstract void InitTrackCount();

		// Token: 0x0600058B RID: 1419 RVA: 0x00022EEC File Offset: 0x000210EC
		private void InitMatch()
		{
			if (this.runmatch == null)
			{
				if (this.runregex.caps != null)
				{
					this.runmatch = new MatchSparse(this.runregex, this.runregex.caps, this.runregex.capsize, this.runtext, this.runtextbeg, this.runtextend - this.runtextbeg, this.runtextstart);
				}
				else
				{
					this.runmatch = new Match(this.runregex, this.runregex.capsize, this.runtext, this.runtextbeg, this.runtextend - this.runtextbeg, this.runtextstart);
				}
			}
			else
			{
				this.runmatch.Reset(this.runregex, this.runtext, this.runtextbeg, this.runtextend, this.runtextstart);
			}
			if (this.runcrawl != null)
			{
				this.runtrackpos = this.runtrack.Length;
				this.runstackpos = this.runstack.Length;
				this.runcrawlpos = this.runcrawl.Length;
				return;
			}
			this.InitTrackCount();
			int num = this.runtrackcount * 8;
			int num2 = this.runtrackcount * 8;
			if (num < 32)
			{
				num = 32;
			}
			if (num2 < 16)
			{
				num2 = 16;
			}
			this.runtrack = new int[num];
			this.runtrackpos = num;
			this.runstack = new int[num2];
			this.runstackpos = num2;
			this.runcrawl = new int[32];
			this.runcrawlpos = 32;
		}

		// Token: 0x0600058C RID: 1420 RVA: 0x00023055 File Offset: 0x00021255
		private Match TidyMatch(bool quick)
		{
			if (!quick)
			{
				Match match = this.runmatch;
				this.runmatch = null;
				match.Tidy(this.runtextpos);
				return match;
			}
			return null;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x0600058D RID: 1421 RVA: 0x00023075 File Offset: 0x00021275
		protected void EnsureStorage()
		{
			if (this.runstackpos < this.runtrackcount * 4)
			{
				this.DoubleStack();
			}
			if (this.runtrackpos < this.runtrackcount * 4)
			{
				this.DoubleTrack();
			}
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="index">The possible boundary position. </param>
		/// <param name="startpos">The starting position. </param>
		/// <param name="endpos">The ending position. </param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x0600058E RID: 1422 RVA: 0x000230A3 File Offset: 0x000212A3
		protected bool IsBoundary(int index, int startpos, int endpos)
		{
			return (index > startpos && RegexCharClass.IsWordChar(this.runtext[index - 1])) != (index < endpos && RegexCharClass.IsWordChar(this.runtext[index]));
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="index">The possible ECMA boundary position. </param>
		/// <param name="startpos">The starting position. </param>
		/// <param name="endpos">The ending position. </param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x0600058F RID: 1423 RVA: 0x000230DC File Offset: 0x000212DC
		protected bool IsECMABoundary(int index, int startpos, int endpos)
		{
			return (index > startpos && RegexCharClass.IsECMAWordChar(this.runtext[index - 1])) != (index < endpos && RegexCharClass.IsECMAWordChar(this.runtext[index]));
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x06000590 RID: 1424 RVA: 0x00023118 File Offset: 0x00021318
		protected void DoubleTrack()
		{
			int[] destinationArray = new int[this.runtrack.Length * 2];
			Array.Copy(this.runtrack, 0, destinationArray, this.runtrack.Length, this.runtrack.Length);
			this.runtrackpos += this.runtrack.Length;
			this.runtrack = destinationArray;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x06000591 RID: 1425 RVA: 0x00023170 File Offset: 0x00021370
		protected void DoubleStack()
		{
			int[] destinationArray = new int[this.runstack.Length * 2];
			Array.Copy(this.runstack, 0, destinationArray, this.runstack.Length, this.runstack.Length);
			this.runstackpos += this.runstack.Length;
			this.runstack = destinationArray;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x06000592 RID: 1426 RVA: 0x000231C8 File Offset: 0x000213C8
		protected void DoubleCrawl()
		{
			int[] destinationArray = new int[this.runcrawl.Length * 2];
			Array.Copy(this.runcrawl, 0, destinationArray, this.runcrawl.Length, this.runcrawl.Length);
			this.runcrawlpos += this.runcrawl.Length;
			this.runcrawl = destinationArray;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="i">A number to save. </param>
		// Token: 0x06000593 RID: 1427 RVA: 0x00023220 File Offset: 0x00021420
		protected void Crawl(int i)
		{
			if (this.runcrawlpos == 0)
			{
				this.DoubleCrawl();
			}
			int[] array = this.runcrawl;
			int num = this.runcrawlpos - 1;
			this.runcrawlpos = num;
			array[num] = i;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x06000594 RID: 1428 RVA: 0x00023254 File Offset: 0x00021454
		protected int Popcrawl()
		{
			int[] array = this.runcrawl;
			int num = this.runcrawlpos;
			this.runcrawlpos = num + 1;
			return array[num];
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x06000595 RID: 1429 RVA: 0x00023279 File Offset: 0x00021479
		protected int Crawlpos()
		{
			return this.runcrawl.Length - this.runcrawlpos;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="capnum">A capture number. </param>
		/// <param name="start">The starting position of the capture. </param>
		/// <param name="end">The ending position of the capture. </param>
		// Token: 0x06000596 RID: 1430 RVA: 0x0002328A File Offset: 0x0002148A
		protected void Capture(int capnum, int start, int end)
		{
			if (end < start)
			{
				int num = end;
				end = start;
				start = num;
			}
			this.Crawl(capnum);
			this.runmatch.AddMatch(capnum, start, end - start);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="capnum">A capture number. </param>
		/// <param name="uncapnum">A saved capture number.</param>
		/// <param name="start">The starting position. </param>
		/// <param name="end">The ending position. </param>
		// Token: 0x06000597 RID: 1431 RVA: 0x000232B0 File Offset: 0x000214B0
		protected void TransferCapture(int capnum, int uncapnum, int start, int end)
		{
			if (end < start)
			{
				int num = end;
				end = start;
				start = num;
			}
			int num2 = this.MatchIndex(uncapnum);
			int num3 = num2 + this.MatchLength(uncapnum);
			if (start >= num3)
			{
				end = start;
				start = num3;
			}
			else if (end <= num2)
			{
				start = num2;
			}
			else
			{
				if (end > num3)
				{
					end = num3;
				}
				if (num2 > start)
				{
					start = num2;
				}
			}
			this.Crawl(uncapnum);
			this.runmatch.BalanceMatch(uncapnum);
			if (capnum != -1)
			{
				this.Crawl(capnum);
				this.runmatch.AddMatch(capnum, start, end - start);
			}
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06000598 RID: 1432 RVA: 0x00023330 File Offset: 0x00021530
		protected void Uncapture()
		{
			int cap = this.Popcrawl();
			this.runmatch.RemoveMatch(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="cap">The capture number. </param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06000599 RID: 1433 RVA: 0x00023350 File Offset: 0x00021550
		protected bool IsMatched(int cap)
		{
			return this.runmatch.IsMatched(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="cap">The capture number. </param>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x0600059A RID: 1434 RVA: 0x0002335E File Offset: 0x0002155E
		protected int MatchIndex(int cap)
		{
			return this.runmatch.MatchIndex(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		/// <param name="cap">The capture number. </param>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x0600059B RID: 1435 RVA: 0x0002336C File Offset: 0x0002156C
		protected int MatchLength(int cap)
		{
			return this.runmatch.MatchLength(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x0400037D RID: 893
		protected internal int runtextbeg;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x0400037E RID: 894
		protected internal int runtextend;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x0400037F RID: 895
		protected internal int runtextstart;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000380 RID: 896
		protected internal string runtext;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000381 RID: 897
		protected internal int runtextpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000382 RID: 898
		protected internal int[] runtrack;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000383 RID: 899
		protected internal int runtrackpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000384 RID: 900
		protected internal int[] runstack;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000385 RID: 901
		protected internal int runstackpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000386 RID: 902
		protected internal int[] runcrawl;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000387 RID: 903
		protected internal int runcrawlpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000388 RID: 904
		protected internal int runtrackcount;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x04000389 RID: 905
		protected internal Match runmatch;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. </summary>
		// Token: 0x0400038A RID: 906
		protected internal Regex runregex;

		// Token: 0x0400038B RID: 907
		private int _timeout;

		// Token: 0x0400038C RID: 908
		private bool _ignoreTimeout;

		// Token: 0x0400038D RID: 909
		private int _timeoutOccursAt;

		// Token: 0x0400038E RID: 910
		private int _timeoutChecksToSkip;
	}
}
