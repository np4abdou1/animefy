using System;
using System.Collections;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;

namespace System.Data
{
	/// <summary>Represents a collection of constraints for a <see cref="T:System.Data.DataTable" />.</summary>
	// Token: 0x02000009 RID: 9
	[DefaultEvent("CollectionChanged")]
	public sealed class ConstraintCollection : InternalDataCollectionBase
	{
		// Token: 0x0600003C RID: 60 RVA: 0x000029BA File Offset: 0x00000BBA
		internal ConstraintCollection(DataTable table)
		{
			this._table = table;
		}

		// Token: 0x1700000B RID: 11
		// (get) Token: 0x0600003D RID: 61 RVA: 0x000029DB File Offset: 0x00000BDB
		protected override ArrayList List
		{
			get
			{
				return this._list;
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.Constraint" /> from the collection at the specified index.</summary>
		/// <param name="index">The index of the constraint to return. </param>
		/// <returns>The <see cref="T:System.Data.Constraint" /> at the specified index.</returns>
		/// <exception cref="T:System.IndexOutOfRangeException">The index value is greater than the number of items in the collection. </exception>
		// Token: 0x1700000C RID: 12
		public Constraint this[int index]
		{
			get
			{
				if (index >= 0 && index < this.List.Count)
				{
					return (Constraint)this.List[index];
				}
				throw ExceptionBuilder.ConstraintOutOfRange(index);
			}
		}

		// Token: 0x1700000D RID: 13
		// (get) Token: 0x0600003F RID: 63 RVA: 0x00002A0F File Offset: 0x00000C0F
		internal DataTable Table
		{
			get
			{
				return this._table;
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.Constraint" /> from the collection with the specified name.</summary>
		/// <param name="name">The <see cref="P:System.Data.Constraint.ConstraintName" /> of the constraint to return. </param>
		/// <returns>The <see cref="T:System.Data.Constraint" /> with the specified name; otherwise a null value if the <see cref="T:System.Data.Constraint" /> does not exist.</returns>
		// Token: 0x1700000E RID: 14
		public Constraint this[string name]
		{
			get
			{
				int num = this.InternalIndexOf(name);
				if (num == -2)
				{
					throw ExceptionBuilder.CaseInsensitiveNameConflict(name);
				}
				if (num >= 0)
				{
					return (Constraint)this.List[num];
				}
				return null;
			}
		}

		/// <summary>Adds the specified <see cref="T:System.Data.Constraint" /> object to the collection.</summary>
		/// <param name="constraint">The <see langword="Constraint" /> to add. </param>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="constraint" /> argument is null. </exception>
		/// <exception cref="T:System.ArgumentException">The constraint already belongs to this collection, or belongs to another collection. </exception>
		/// <exception cref="T:System.Data.DuplicateNameException">The collection already has a constraint with the same name. (The comparison is not case-sensitive.) </exception>
		// Token: 0x06000041 RID: 65 RVA: 0x00002A50 File Offset: 0x00000C50
		public void Add(Constraint constraint)
		{
			this.Add(constraint, true);
		}

		// Token: 0x06000042 RID: 66 RVA: 0x00002A5C File Offset: 0x00000C5C
		internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (this.FindConstraint(constraint) != null)
			{
				throw ExceptionBuilder.DuplicateConstraint(this.FindConstraint(constraint).ConstraintName);
			}
			if (1 < this._table.NestedParentRelations.Length && !this.AutoGenerated(constraint))
			{
				throw ExceptionBuilder.CantAddConstraintToMultipleNestedTable(this._table.TableName);
			}
			if (constraint is UniqueConstraint)
			{
				if (((UniqueConstraint)constraint)._bPrimaryKey && this.Table._primaryKey != null)
				{
					throw ExceptionBuilder.AddPrimaryKeyConstraint();
				}
				this.AddUniqueConstraint((UniqueConstraint)constraint);
			}
			else if (constraint is ForeignKeyConstraint)
			{
				ForeignKeyConstraint foreignKeyConstraint = (ForeignKeyConstraint)constraint;
				if (addUniqueWhenAddingForeign && foreignKeyConstraint.RelatedTable.Constraints.FindKeyConstraint(foreignKeyConstraint.RelatedColumnsReference) == null)
				{
					if (constraint.ConstraintName.Length == 0)
					{
						constraint.ConstraintName = this.AssignName();
					}
					else
					{
						this.RegisterName(constraint.ConstraintName);
					}
					UniqueConstraint constraint2 = new UniqueConstraint(foreignKeyConstraint.RelatedColumnsReference);
					foreignKeyConstraint.RelatedTable.Constraints.Add(constraint2);
				}
				this.AddForeignKeyConstraint((ForeignKeyConstraint)constraint);
			}
			this.BaseAdd(constraint);
			this.ArrayAdd(constraint);
			this.OnCollectionChanged(new CollectionChangeEventArgs(CollectionChangeAction.Add, constraint));
			if (constraint is UniqueConstraint && ((UniqueConstraint)constraint)._bPrimaryKey)
			{
				this.Table.PrimaryKey = ((UniqueConstraint)constraint).ColumnsReference;
			}
		}

		/// <summary>Constructs a new <see cref="T:System.Data.UniqueConstraint" /> with the specified name, array of <see cref="T:System.Data.DataColumn" /> objects, and value that indicates whether the column is a primary key, and adds it to the collection.</summary>
		/// <param name="name">The name of the <see cref="T:System.Data.UniqueConstraint" />. </param>
		/// <param name="columns">An array of <see cref="T:System.Data.DataColumn" /> objects to which the constraint applies. </param>
		/// <param name="primaryKey">Specifies whether the column should be the primary key. If <see langword="true" />, the column will be a primary key column.</param>
		/// <returns>A new <see langword="UniqueConstraint" />.</returns>
		/// <exception cref="T:System.ArgumentException">The constraint already belongs to this collection.-Or- The constraint belongs to another collection. </exception>
		/// <exception cref="T:System.Data.DuplicateNameException">The collection already has a constraint with the specified name. (The comparison is not case-sensitive.) </exception>
		// Token: 0x06000043 RID: 67 RVA: 0x00002BB4 File Offset: 0x00000DB4
		public Constraint Add(string name, DataColumn[] columns, bool primaryKey)
		{
			UniqueConstraint uniqueConstraint = new UniqueConstraint(name, columns);
			this.Add(uniqueConstraint);
			if (primaryKey)
			{
				this.Table.PrimaryKey = columns;
			}
			return uniqueConstraint;
		}

		// Token: 0x06000044 RID: 68 RVA: 0x00002BE0 File Offset: 0x00000DE0
		private void AddUniqueConstraint(UniqueConstraint constraint)
		{
			DataColumn[] columnsReference = constraint.ColumnsReference;
			for (int i = 0; i < columnsReference.Length; i++)
			{
				if (columnsReference[i].Table != this._table)
				{
					throw ExceptionBuilder.ConstraintForeignTable();
				}
			}
			constraint.ConstraintIndexInitialize();
			if (!constraint.CanEnableConstraint())
			{
				constraint.ConstraintIndexClear();
				throw ExceptionBuilder.UniqueConstraintViolation();
			}
		}

		// Token: 0x06000045 RID: 69 RVA: 0x00002C32 File Offset: 0x00000E32
		private void AddForeignKeyConstraint(ForeignKeyConstraint constraint)
		{
			if (!constraint.CanEnableConstraint())
			{
				throw ExceptionBuilder.ConstraintParentValues();
			}
			constraint.CheckCanAddToCollection(this);
		}

		// Token: 0x06000046 RID: 70 RVA: 0x00002C4C File Offset: 0x00000E4C
		private bool AutoGenerated(Constraint constraint)
		{
			ForeignKeyConstraint foreignKeyConstraint = constraint as ForeignKeyConstraint;
			if (foreignKeyConstraint != null)
			{
				return XmlTreeGen.AutoGenerated(foreignKeyConstraint, false);
			}
			return XmlTreeGen.AutoGenerated((UniqueConstraint)constraint);
		}

		// Token: 0x06000047 RID: 71 RVA: 0x00002C76 File Offset: 0x00000E76
		private void ArrayAdd(Constraint constraint)
		{
			this.List.Add(constraint);
		}

		// Token: 0x06000048 RID: 72 RVA: 0x00002C85 File Offset: 0x00000E85
		private void ArrayRemove(Constraint constraint)
		{
			this.List.Remove(constraint);
		}

		// Token: 0x06000049 RID: 73 RVA: 0x00002C93 File Offset: 0x00000E93
		internal string AssignName()
		{
			string result = this.MakeName(this._defaultNameIndex);
			this._defaultNameIndex++;
			return result;
		}

		// Token: 0x0600004A RID: 74 RVA: 0x00002CAF File Offset: 0x00000EAF
		private void BaseAdd(Constraint constraint)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (constraint.ConstraintName.Length == 0)
			{
				constraint.ConstraintName = this.AssignName();
			}
			else
			{
				this.RegisterName(constraint.ConstraintName);
			}
			constraint.InCollection = true;
		}

		// Token: 0x0600004B RID: 75 RVA: 0x00002CF0 File Offset: 0x00000EF0
		private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength)
		{
			int num = 0;
			for (int i = 0; i < oldLength; i++)
			{
				bool flag = false;
				for (int j = num; j < newLength; j++)
				{
					if (oldArray[i] == newArray[j])
					{
						if (num == j)
						{
							num++;
						}
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					this.BaseRemove(oldArray[i]);
					this.List.Remove(oldArray[i]);
				}
			}
			for (int k = 0; k < newLength; k++)
			{
				if (!newArray[k].InCollection)
				{
					this.BaseAdd(newArray[k]);
				}
				this.List.Add(newArray[k]);
			}
		}

		// Token: 0x0600004C RID: 76 RVA: 0x00002D80 File Offset: 0x00000F80
		private void BaseRemove(Constraint constraint)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (constraint.Table != this._table)
			{
				throw ExceptionBuilder.ConstraintRemoveFailed();
			}
			this.UnregisterName(constraint.ConstraintName);
			constraint.InCollection = false;
			if (constraint is UniqueConstraint)
			{
				for (int i = 0; i < this.Table.ChildRelations.Count; i++)
				{
					DataRelation dataRelation = this.Table.ChildRelations[i];
					if (dataRelation.ParentKeyConstraint == constraint)
					{
						dataRelation.SetParentKeyConstraint(null);
					}
				}
				((UniqueConstraint)constraint).ConstraintIndexClear();
				return;
			}
			if (constraint is ForeignKeyConstraint)
			{
				for (int j = 0; j < this.Table.ParentRelations.Count; j++)
				{
					DataRelation dataRelation2 = this.Table.ParentRelations[j];
					if (dataRelation2.ChildKeyConstraint == constraint)
					{
						dataRelation2.SetChildKeyConstraint(null);
					}
				}
			}
		}

		// Token: 0x0600004D RID: 77 RVA: 0x00002E58 File Offset: 0x00001058
		internal bool CanRemove(Constraint constraint, bool fThrowException)
		{
			return constraint.CanBeRemovedFromCollection(this, fThrowException);
		}

		/// <summary>Clears the collection of any <see cref="T:System.Data.Constraint" /> objects.</summary>
		// Token: 0x0600004E RID: 78 RVA: 0x00002E64 File Offset: 0x00001064
		public void Clear()
		{
			if (this._table != null)
			{
				this._table.PrimaryKey = null;
				for (int i = 0; i < this._table.ParentRelations.Count; i++)
				{
					this._table.ParentRelations[i].SetChildKeyConstraint(null);
				}
				for (int j = 0; j < this._table.ChildRelations.Count; j++)
				{
					this._table.ChildRelations[j].SetParentKeyConstraint(null);
				}
			}
			if (this._table.fInitInProgress && this._delayLoadingConstraints != null)
			{
				this._delayLoadingConstraints = null;
				this._fLoadForeignKeyConstraintsOnly = false;
			}
			int count = this.List.Count;
			Constraint[] array = new Constraint[this.List.Count];
			this.List.CopyTo(array, 0);
			try
			{
				this.BaseGroupSwitch(array, count, null, 0);
			}
			catch (Exception e) when (ADP.IsCatchableOrSecurityExceptionType(e))
			{
				this.BaseGroupSwitch(null, 0, array, count);
				this.List.Clear();
				for (int k = 0; k < count; k++)
				{
					this.List.Add(array[k]);
				}
				throw;
			}
			this.List.Clear();
			this.OnCollectionChanged(InternalDataCollectionBase.s_refreshEventArgs);
		}

		/// <summary>Indicates whether the <see cref="T:System.Data.Constraint" /> object specified by name exists in the collection.</summary>
		/// <param name="name">The <see cref="P:System.Data.Constraint.ConstraintName" /> of the constraint. </param>
		/// <returns>
		///     <see langword="true" /> if the collection contains the specified constraint; otherwise, <see langword="false" />.</returns>
		// Token: 0x0600004F RID: 79 RVA: 0x00002FB8 File Offset: 0x000011B8
		public bool Contains(string name)
		{
			return this.InternalIndexOf(name) >= 0;
		}

		// Token: 0x06000050 RID: 80 RVA: 0x00002FC8 File Offset: 0x000011C8
		internal bool Contains(string name, bool caseSensitive)
		{
			if (!caseSensitive)
			{
				return this.Contains(name);
			}
			int num = this.InternalIndexOf(name);
			return num >= 0 && name == ((Constraint)this.List[num]).ConstraintName;
		}

		// Token: 0x06000051 RID: 81 RVA: 0x0000300C File Offset: 0x0000120C
		internal Constraint FindConstraint(Constraint constraint)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				if (((Constraint)this.List[i]).Equals(constraint))
				{
					return (Constraint)this.List[i];
				}
			}
			return null;
		}

		// Token: 0x06000052 RID: 82 RVA: 0x00003060 File Offset: 0x00001260
		internal UniqueConstraint FindKeyConstraint(DataColumn[] columns)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				UniqueConstraint uniqueConstraint = this.List[i] as UniqueConstraint;
				if (uniqueConstraint != null && ConstraintCollection.CompareArrays(uniqueConstraint.Key.ColumnsReference, columns))
				{
					return uniqueConstraint;
				}
			}
			return null;
		}

		// Token: 0x06000053 RID: 83 RVA: 0x000030B4 File Offset: 0x000012B4
		internal UniqueConstraint FindKeyConstraint(DataColumn column)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				UniqueConstraint uniqueConstraint = this.List[i] as UniqueConstraint;
				if (uniqueConstraint != null && uniqueConstraint.Key.ColumnsReference.Length == 1 && uniqueConstraint.Key.ColumnsReference[0] == column)
				{
					return uniqueConstraint;
				}
			}
			return null;
		}

		// Token: 0x06000054 RID: 84 RVA: 0x00003118 File Offset: 0x00001318
		internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				ForeignKeyConstraint foreignKeyConstraint = this.List[i] as ForeignKeyConstraint;
				if (foreignKeyConstraint != null && ConstraintCollection.CompareArrays(foreignKeyConstraint.ParentKey.ColumnsReference, parentColumns) && ConstraintCollection.CompareArrays(foreignKeyConstraint.ChildKey.ColumnsReference, childColumns))
				{
					return foreignKeyConstraint;
				}
			}
			return null;
		}

		// Token: 0x06000055 RID: 85 RVA: 0x00003184 File Offset: 0x00001384
		private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2)
		{
			if (a1.Length != a2.Length)
			{
				return false;
			}
			for (int i = 0; i < a1.Length; i++)
			{
				bool flag = false;
				for (int j = 0; j < a2.Length; j++)
				{
					if (a1[i] == a2[j])
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06000056 RID: 86 RVA: 0x000031CC File Offset: 0x000013CC
		internal int InternalIndexOf(string constraintName)
		{
			int num = -1;
			if (constraintName != null && 0 < constraintName.Length)
			{
				int count = this.List.Count;
				for (int i = 0; i < count; i++)
				{
					Constraint constraint = (Constraint)this.List[i];
					int num2 = base.NamesEqual(constraint.ConstraintName, constraintName, false, this._table.Locale);
					if (num2 == 1)
					{
						return i;
					}
					if (num2 == -1)
					{
						num = ((num == -1) ? i : -2);
					}
				}
			}
			return num;
		}

		// Token: 0x06000057 RID: 87 RVA: 0x00003244 File Offset: 0x00001444
		private string MakeName(int index)
		{
			if (1 == index)
			{
				return "Constraint1";
			}
			return "Constraint" + index.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x06000058 RID: 88 RVA: 0x00003266 File Offset: 0x00001466
		private void OnCollectionChanged(CollectionChangeEventArgs ccevent)
		{
			CollectionChangeEventHandler onCollectionChanged = this._onCollectionChanged;
			if (onCollectionChanged == null)
			{
				return;
			}
			onCollectionChanged(this, ccevent);
		}

		// Token: 0x06000059 RID: 89 RVA: 0x0000327C File Offset: 0x0000147C
		internal void RegisterName(string name)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				if (base.NamesEqual(name, ((Constraint)this.List[i]).ConstraintName, true, this._table.Locale) != 0)
				{
					throw ExceptionBuilder.DuplicateConstraintName(((Constraint)this.List[i]).ConstraintName);
				}
			}
			if (base.NamesEqual(name, this.MakeName(this._defaultNameIndex), true, this._table.Locale) != 0)
			{
				this._defaultNameIndex++;
			}
		}

		/// <summary>Removes the specified <see cref="T:System.Data.Constraint" /> from the collection.</summary>
		/// <param name="constraint">The <see cref="T:System.Data.Constraint" /> to remove. </param>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="constraint" /> argument is <see langword="null" />. </exception>
		/// <exception cref="T:System.ArgumentException">The constraint does not belong to the collection. </exception>
		// Token: 0x0600005A RID: 90 RVA: 0x00003318 File Offset: 0x00001518
		public void Remove(Constraint constraint)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (this.CanRemove(constraint, true))
			{
				this.BaseRemove(constraint);
				this.ArrayRemove(constraint);
				if (constraint is UniqueConstraint && ((UniqueConstraint)constraint).IsPrimaryKey)
				{
					this.Table.PrimaryKey = null;
				}
				this.OnCollectionChanged(new CollectionChangeEventArgs(CollectionChangeAction.Remove, constraint));
			}
		}

		// Token: 0x0600005B RID: 91 RVA: 0x0000337C File Offset: 0x0000157C
		internal void UnregisterName(string name)
		{
			if (base.NamesEqual(name, this.MakeName(this._defaultNameIndex - 1), true, this._table.Locale) != 0)
			{
				do
				{
					this._defaultNameIndex--;
				}
				while (this._defaultNameIndex > 1 && !this.Contains(this.MakeName(this._defaultNameIndex - 1)));
			}
		}

		// Token: 0x0600005C RID: 92 RVA: 0x000033DC File Offset: 0x000015DC
		internal void FinishInitConstraints()
		{
			if (this._delayLoadingConstraints == null)
			{
				return;
			}
			for (int i = 0; i < this._delayLoadingConstraints.Length; i++)
			{
				if (this._delayLoadingConstraints[i] is UniqueConstraint)
				{
					if (!this._fLoadForeignKeyConstraintsOnly)
					{
						UniqueConstraint uniqueConstraint = (UniqueConstraint)this._delayLoadingConstraints[i];
						if (uniqueConstraint._columnNames == null)
						{
							this.Add(uniqueConstraint);
						}
						else
						{
							int num = uniqueConstraint._columnNames.Length;
							DataColumn[] array = new DataColumn[num];
							for (int j = 0; j < num; j++)
							{
								array[j] = this._table.Columns[uniqueConstraint._columnNames[j]];
							}
							if (uniqueConstraint._bPrimaryKey)
							{
								if (this._table._primaryKey != null)
								{
									throw ExceptionBuilder.AddPrimaryKeyConstraint();
								}
								this.Add(uniqueConstraint.ConstraintName, array, true);
							}
							else
							{
								UniqueConstraint constraint = new UniqueConstraint(uniqueConstraint._constraintName, array);
								if (this.FindConstraint(constraint) == null)
								{
									this.Add(constraint);
								}
							}
						}
					}
				}
				else
				{
					ForeignKeyConstraint foreignKeyConstraint = (ForeignKeyConstraint)this._delayLoadingConstraints[i];
					if (foreignKeyConstraint._parentColumnNames == null || foreignKeyConstraint._childColumnNames == null)
					{
						this.Add(foreignKeyConstraint);
					}
					else if (this._table.DataSet == null)
					{
						this._fLoadForeignKeyConstraintsOnly = true;
					}
					else
					{
						int num = foreignKeyConstraint._parentColumnNames.Length;
						DataColumn[] array = new DataColumn[num];
						DataColumn[] array2 = new DataColumn[num];
						for (int k = 0; k < num; k++)
						{
							if (foreignKeyConstraint._parentTableNamespace == null)
							{
								array[k] = this._table.DataSet.Tables[foreignKeyConstraint._parentTableName].Columns[foreignKeyConstraint._parentColumnNames[k]];
							}
							else
							{
								array[k] = this._table.DataSet.Tables[foreignKeyConstraint._parentTableName, foreignKeyConstraint._parentTableNamespace].Columns[foreignKeyConstraint._parentColumnNames[k]];
							}
							array2[k] = this._table.Columns[foreignKeyConstraint._childColumnNames[k]];
						}
						this.Add(new ForeignKeyConstraint(foreignKeyConstraint._constraintName, array, array2)
						{
							AcceptRejectRule = foreignKeyConstraint._acceptRejectRule,
							DeleteRule = foreignKeyConstraint._deleteRule,
							UpdateRule = foreignKeyConstraint._updateRule
						});
					}
				}
			}
			if (!this._fLoadForeignKeyConstraintsOnly)
			{
				this._delayLoadingConstraints = null;
			}
		}

		// Token: 0x04000018 RID: 24
		private readonly DataTable _table;

		// Token: 0x04000019 RID: 25
		private readonly ArrayList _list = new ArrayList();

		// Token: 0x0400001A RID: 26
		private int _defaultNameIndex = 1;

		// Token: 0x0400001B RID: 27
		private CollectionChangeEventHandler _onCollectionChanged;

		// Token: 0x0400001C RID: 28
		private Constraint[] _delayLoadingConstraints;

		// Token: 0x0400001D RID: 29
		private bool _fLoadForeignKeyConstraintsOnly;
	}
}
